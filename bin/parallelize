#!/bin/bash


################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# bashlets -- A modular extensible toolbox for Bash
#
# Parallelizing wrapper
#
# Copyright (c) 2014-6 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################

# Suppose that we have got a list of items and need to perform some task on
# each one.  The naivest way would be to have the tasks run in sequence, but of
# course this would mean allowing slowest tasks to block the ones following
# them:
# 
#     function perform_task()
#     {
#         ...
#     }
#      
#     while read item
#     do
#         perform_task $item
#     done < list
#
# Or we could parallelize the whole thing.  Threading support is not native in
# Bash, but we can emulate it by means of a little bit of trickery as follows:
#
#     max_proc=0
#     
#     function perform_task()
#     {
#         ...
#     }
#     
#     if [ $# == 0 ]
#     then
#         cat list | xargs -P $max_proc -I {} $0 {}
#     else
#         perform_task $1
#     fi
#
# Here, if the script is called without arguments (``$# == 0''), it calls the
# standard utility xargs(1), which is capable of constructing a list of
# commands by reading its standard input and running them in parallel.
#
# It should be noted that, when called with -P max_proc, GNU xargs(1) will run
# simultaneously up to max_procs processes at once; whilst, if it is set to 0,
# xargs will run as many processes as possible simultaneously.
#
# In our example, each command has the form ``$0 {}'', where ``$0'' is the name
# of the script itself and ``{}'' is replaced each time with the items
# contained in ``list''.  Hence the script calls itself multiple times in
# parallel and passes to it, as argument, the item to be processed.  This time
# the argument count is greater than zero (``$# > 0'') and the ``else'' clause
# is executed.
#
# Of course the parallelization gives us a real benefit only if each task needs
# to gain access to a separate resource (e.g., performing some work on several
# nodes in a network).
#
# (thanks to Nico Emanuelli for coming up with the problem that inspired this
# solution)


BASHLETS_PARALLELIZE_MAXPROC=0

[ -n "$BASHLETS_PARALLELIZE_TASKLIST" ] || exit


##
## main loop
##

if [ $# == 0 ]
then
	cat "$BASHLETS_PARALLELIZE_TASKLIST"  \
    | xargs -P $BASHLETS_PARALLELIZE_MAXPROC -I {} $0 {}
else
	bashlets_parallelize_single_task $1
fi

# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
