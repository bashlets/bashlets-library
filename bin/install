#!/bin/bash

################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# bashlets -- A modular extensible toolbox for Bash
#
# Installation script
#
# Copyright (c) 2014-6 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################


#
# global variables
################################################################################

BASHLETS_BASE=~/.bashlets
BASHLETS_LOADER_1ST_STAGE_DESTINATIONS=~/.local/bin:/usr/local/bin

# which Git branch are we interested in?
branch=master

# install the first stage loader
unset install_1st_stage_loader

# set the current installation as the default one
unset set_as_default


#
# utilities
################################################################################

function usage()
{
    cat <<-EOF
		Usage:

		    bin/install [ -1 ] [ -D ] [ -B <branch> ]

		Options:

		   -1      install the first-stage loader
		   -D      set the current installation as the default one
		   -B      switch to another Git branch
		   -?      display this help and exit
		   -V      output version information and exit

	EOF
} 

function version()
{
    cat <<-EOF
		bin/install 0.1
	EOF
} 

function cleanup()
{
    [[ -n $current_branch ]] && git checkout -q $current_branch
}

trap cleanup EXIT


#
# parse command line options
################################################################################

while getopts "1DB:?V" OPTION
do
    case $OPTION in
		1)
			install_1st_stage_loader=1
			;;
		D)
			set_as_default=1
			;;
		B)
			branch=$OPTARG
			;;
		?)
			echo ; version
			echo ; usage
			exit 0
			;;
		V)
			version
			exit 0
			;;
    esac
done

shift $((OPTIND-1))


#
# some sanity checks
################################################################################

# check if we are at the repository's apex
[[ $(pwd) == $(git rev-parse --show-toplevel) ]] || {
    echo "ERROR: bin/install must be executed from the root of this Git repository!" >&2
    exit 1
}

# save the current branch, in case we need to switch branch
current_branch=$(git rev-parse --abbrev-ref HEAD)


#
# determine (and create it if needed) the installation folder
################################################################################

# revision can be given (optionally) on command line
rev="${1:-$(git rev-parse $branch)}"

# installation folder
install_path="$BASHLETS_BASE/$rev"

# check if the installation folder does exist or create it
[[ -d $install_path ]] || mkdir -p "$install_path"


#
# install the codebase
################################################################################

# switch to the given branch
git checkout -q $branch || {
    echo "ERROR: could not switch to $branch branch!" >&2
    exit 1
}

# export the codebase into the installation folder
git archive $rev | tar -x -C "$install_path" || {
    echo "ERROR: could not install the first-stage loader!" >&2
    exit 1
}

# if required set the current installation as the default one
# ($BASHLETS_BASE can contain multiple installations)
[[ ! -e $BASHLETS_BASE/DEFAULT || -n $set_as_default ]] && {
    rm -f "$BASHLETS_BASE/DEFAULT" && ln -s $rev "$BASHLETS_BASE/DEFAULT"
}


#
# install the first-stage loader if needed
################################################################################

unset _1st_stage_loader_installed

# cycle possible destinations to install the 1st stage loader
IFS=: read -r -a destinations <<< "$BASHLETS_LOADER_1ST_STAGE_DESTINATIONS"
for d in ${destinations[@]}
do
    _1st_stage_loader="$d/bashlet"

    # if the loader does already exist AND the user did not require
    # anything, we are done
    [[ -e $file_name && -z $install_1st_stage_loader ]] && break

    {
        # try and create the directory
        mkdir -p "$d"
        # install the 1st stage loader
        cp "$install_path/bin/bashlet" "$_1st_stage_loader"
        # we are done
        _1st_stage_loader_installed=1
        break
    } 2> /dev/null || continue

done


#
# ex-post checks
################################################################################

# check that everything was ok
[[ -z $install_1st_stage_loader || -n $_1st_stage_loader_installed ]] || {
    echo "ERROR: could not install the first-stage loader!" >&2
    exit 1
}

# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
