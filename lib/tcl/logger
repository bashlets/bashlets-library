#!/bin/bash


################################################################################
#
# |              |    |         |
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#
# Bashlets -- A modular extensible toolbox for Bash
#
# Copyright (c) 2014-6 Roberto Reale
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################


source bashlet os/term

#@method
function bashlets_tcl_logger_get_text()
{
    local f="$1"
    local tcl_text

    case "$f" in 
        logger)
			tcl_text='
				package require Tcl 8.4
				package require logger
				package require syslog

				set logger_handler     null
				set logger_ident       null
				set logger_facility    null
				set logger_priority    null
				set logger_interactive null


				proc logger_get_handler {} {
					global logger_handler
					return $logger_handler
				}

				proc logger_get_ident {} {
					global logger_ident
					return $logger_ident
				}

				proc logger_get_facility {} {
					global logger_facility
					return $logger_facility
				}

				proc logger_get_priority {} {
					global logger_priority
					return $logger_priority
				}

				proc logger_get_interactive {} {
					global logger_interactive
					return $logger_interactive
				}

				proc logger_set_handler {handler} {
					global logger_handler
					set logger_handler $handler
				}

				proc logger_set_ident {ident} {
					global logger_ident
					set logger_ident $ident
				}

				proc logger_set_facility {facility} {
					global logger_facility
					set logger_facility $facility
				}

				proc logger_set_priority {priority} {
					global logger_priority
					set logger_priority $priority
				}

				proc logger_set_interactive {interactive} {
					global logger_interactive
					set logger_interactive $interactive
				}

				proc logger_init {service} {
					logger_set_handler      [logger::init $service]
					logger_set_ident        $service
					logger_set_facility     "user"
					logger_set_priority     "notice"
					logger_set_interactive  0
				}

				proc logger_write {message} {
					global logger_handler
					global logger_ident
					global logger_facility
					global logger_priority
					global logger_interactive

					if { $logger_interactive } {
						${logger_handler}::${logger_priority} $message
					} else {
						syslog -ident $logger_ident -facility $logger_facility $logger_priority $message
					}
				}
			'
			;;
        *)
            # TODO error!
            ;;
    esac

    cat <<< "$tcl_text"
}

function bashlets_tcl_logger_validate_priority
{
	# cf. http://tcl-syslog.sourceforge.net/

	case "$1" in
    	emergency)  # system is unusable
			return ;;
        alert)      # action must be taken immediately
			return ;;
        critical)   # critical conditions
			return ;;
        error)      # error conditions
			return ;;
        warning)    # warning conditions
			return ;;
        notice)     # normal, but significant, condition
			return ;;
        info)       # informational message
			return ;;
        debug)      # debugâˆ’level message
			return ;;
		*)
			return 1
	esac
}

#@method
function bashlets_tcl_logger_write()
{
	local service="$1" priority="$2" ; shift 2
	local interactive=0
    local tcl_text

	test $# -gt 0 || return

	$BASHLETS_NAMESPACE term is_tty && interactive=1

	bashlets_tcl_logger_validate_priority "$priority" || return 1

    tcl_text="
        $(bashlets_tcl_logger_get_text logger)

		logger_init {$service}
		logger_set_interactive $interactive
		logger_set_priority    \"$priority\"

		logger_write $@
    "

    tclsh <<< "$tcl_text"
}

# ex: ts=4 sw=4 et filetype=sh noexpandtab
