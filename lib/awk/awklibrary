#!/bin/bash


################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# Bashlets -- A modular extensible toolbox for Bash
#
# Copyright (c) 2014-5 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################


#@method
function bashlets_awk_awklibrary_load()
{
    echo '
        #
        # absolute value
        #

        function abs(a) {
            return a >= 0 ? a : -a
        }

        #
        # sign function
        #

        function sign(a) {
            return a >= 0 ? 1 : -1
        }

        #
        # extended euclidean algorithm, private function
        #
        #   given two non-negative integers a, b, calculates
        #   the gcd(a, b) and the unique s, t such that s*a + t*b = gcd(a, b)
        #
        # input: a, b
        #
        # output: a string in the form "s;t;gcd"
        #
        # warning: no check is performed on a, b
        #

        function __extended_gcd(a, b, gcd, q, r, s, t, v) {
            if (b == 0)
                return "1;0;"a
            
            q = int(a / b)
            r = a % b
            
            split(__extended_gcd(b, r), v, ";")
            
            s = v[1]
            t = v[2]
            gcd = v[3]

            return t ";" s - q*t ";" gcd
        }

        #
        # extended euclidean algorithm, public interface
        #
        # input: arbitrary integers a, b
        #
        # output: a string in the form "s;t;gcd"
        #

        function extended_gcd(a, b, x, y, gcd, v) {
            split(__extended_gcd(abs(a), abs(b)), v, ";")
            
            x = v[1] * sign(a)
            y = v[2] * sign(b)
            gcd = v[3]
            
            return x ";" y ";" gcd
        }

        #
        # return 0 if the string s represents a valid integer,
        # -1 otherwise
        #

        function validate_int(s) {
            if (s !~ /^[+-]*[0-9]+$/)
                return -1
            else
                return 0
        }

        #
        # return 0 if the string s represents a valid positive integer,
        # -1 otherwise
        #

        function validate_positive_int(s) {
            if (s !~ /^\+*[0-9]+$/)
                return -1
            else
                return 0
        }
    '
}

# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
