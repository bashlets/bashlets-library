#!/bin/bash


################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# Bashlets -- A modular extensible toolbox for Bash
#
# Copyright (c) 2014-6 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################


#  Computing the Levenshtein distance is based on the observation that if we
#  reserve a matrix to hold the Levenshtein distances between all prefixes of
#  the first string and all prefixes of the second, then we can compute the
#  values in the matrix by flood filling the matrix, and thus find the distance
#  between the two full strings as the last value computed.
#  
#  This algorithm, an example of bottom-up dynamic programming, is discussed,
#  with variants, in the 1974 article The String-to-string correction problem
#  by Robert A. Wagner and Michael J. Fischer.
#
#  see http://en.wikipedia.org/wiki/Levenshtein_distance


#@method
function bashlets_awk_math_strings_levenshtein()
{
    local s=$1 t=$2

    awk -v s=$s -v t=$t -e '
        function min(x, y)
        {
            if (x <= y)
                return x
            else
                return y
        }

        function min3(x, y, z)
        {
            return min(min(x, y), z)
        }

        function LevenshteinDistance(s, t)
        {

            # for all i and j, d[i,j] holds the Levenshtein distance between
            # the first i characters of s and the first j characters of t

            m = length(s)
            n = length(t)

            # the distance of any first string to an empty second string
            for (i = 1; i <= m+1; i++)
                d[i, 1] = i - 1;

            # the distance of any second string to an empty first string
            for (j = 1; j <= n+1; j++)
                d[1, j] = j - 1;

            for (j = 2; j <= n+1; j++) {
                for (i = 2; i<= m+1; i++) {
                    if (substr(s, i-1, 1) == substr(t, j-1, 1))
                        d[i, j] = d[i-1, j-1]          # a no-op
                    else
                        d[i, j] = min3(d[i-1, j] + 1,  # a deletion
                            d[i, j-1] + 1,             # an insertion
                            d[i-1, j-1] + 1)           # a substitution
                }
            }

            return d[m+1, n+1]
        }


        BEGIN {
            print LevenshteinDistance(s, t)
        }
    '
}

# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
