#!/bin/bash


################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# Bashlets -- A modular extensible toolbox for Bash
#
# Copyright (c) 2014-6 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################


source bashlet datatype/number
source bashlet awk/awklibrary
 

# calculates an approximation of PI by means of Vi`ete's formula
#
#   see http://en.wikipedia.org/wiki/Vi`ete's_formula

#@method
function bashlets_awk_math_pi_by_viete()
{
    local tol=${1:-.000001}

    awk -v tol=$tol -e ' 
        function abs(x) {
            return x >= -x ? x : -x
        }
         
        BEGIN {
            x = sqrt(2)
            v_new = x / 2
         
            while (abs(v_new - v) >= tol) {
                x = sqrt(2 + x)
                v = v_new
                v_new = v * (x / 2)
            }
         
            print 2 / v_new
         
            exit
        }
    '
}


# calculates the arithmetic-geometric mean of two numbers
#
#   see http://en.wikipedia.org/wiki/Arithmetic-geometric_mean
 
#@method
function bashlets_awk_math_agm()
{
    local a=${1:-0} b=${2:-0}
    local tol=${3:-.0001}

    awk -v a=$a -v b=$b -v tol=$tol -e ' 
        function abs(x) {
            return x >= -x ? x : -x
        }
         
        BEGIN {
            if (a > 0 && b > 0) {
                am = a
                gm = b
             
                while (abs(am - gm) >= tol) {
                    am_old = am
                    gm_old = gm
                    am = (am_old + gm_old) / 2
                    gm = sqrt(am_old * gm_old)
                }
             
                print (am + gm) / 2
            }

            exit
        }
    '
}


# << Many of the methods for calculating square roots of a positive real number
# S require an initial seed value. >>
#
# (http://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Rough_estimation)
#
# We use sqrt(x) ~ 2^(d/2), where d is the number of binary digits of either x
# or 1/x, whatever happens to be greater.

#@method
function bashlets_awk_math_rough_sqrt()
{
    awk -v x=${1:-0} -e '
        function rough_sqrt(x) {
            if (x > 1) {
                for (d = 0; x != 0; x = rshift(x, 1)) { d++ }
                d /= 2
                return lshift(0x1, d)
            } else if (x == 1) {
                return 1
            } else if (x > 0) {
                return rough_sqrt(1/x)
            } else {
                return -1
            }
        }

        BEGIN {
            print rough_sqrt(x)
            exit
        }
    '
}


#
# << Perhaps the first algorithm used for approximating sqrt(x) is known as the
#    "Babylonian method", named after the Babylonians, or "Heron's method", named
#    after the first-century Greek mathematician Hero of Alexandria who gave the
#    first explicit description of the method. >>
#
# (http://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)
#

#@method
function bashlets_awk_math_sqrt_by_heron()
{
    local x=${1:-1} tol=${2:-.000001}
    declare -i r

    $BASHLETS_NAMESPACE number validate_as_unsigned_float $x || {
        echo "input should be a valid number"
        return 1
    }

    # get a convenient approximation for the square root of x
    r=$(bashlets_awk_math_rough_sqrt $x)

    awk -v x=$x -v r=$r -v tol=$tol -e "
         
        function abs(x) {
            return x >= -x ? x : -x
        }
         
        BEGIN {
            if (x < 1) {
                old_x = x
                x = 1 / x
            }

            # Heron's algorithm
            while (abs(old_r - r) >= tol) {
                old_r = r
                r = .5 * (r + x/r)
            }
         
            if (old_x) {
                r = 1 / r
            }

            # return result
            print r
        }
    "
}



# implement the Horner algorithm for evaluating a polynomial at a given point
#
#   (see http://en.wikipedia.org/wiki/Horner_scheme)

#@method
function bashlets_awk_math_horner_eval()
{
    [ $# -gt 1 ] || return

    echo $@ | awk -e '
        function horner(poly, n, x_0, res) {
            res = 0
            
            for (i = 1; i <= n; i++) {
                res = res*x_0 + poly[i]
            }
            
            return res
        }
         
        {
            split($0, poly)
            delete poly[NF]
            x_0 = $NF
            
            res = horner(poly, NF-1, x_0)
            print res
        }
    '
}



#
# fast modular exponentiation
#
#   see http://en.wikipedia.org/wiki/Modular_exponentiation
#

#@method
function bashlets_awk_math_modular_pow()
{
    local base=$1 expon=$2 mod=$3

    $BASHLETS_NAMESPACE number validate_as_integer  $base  || return 1
    $BASHLETS_NAMESPACE number validate_as_integer  $expon || return 1
    $BASHLETS_NAMESPACE number validate_as_unsigned $mod   || return 1

    ((mod > 0)) || return 1

    awk -v base=$base -v expon=$expon -v mod=$mod -e '
        function modular_pow(base, expon, mod) {
            result = 1

            while (expon > 0) {
                if (and(expon, 1) == 1) {
                    result = (result * base) % mod
                }

                expon = rshift(expon, 1)
                base = (base * base) % mod
            }

            return result
        }

        BEGIN {
            print modular_pow(base, expon, mod)
            exit
        }
    '
}


#
# extended euclidean algorithm, private function
#
#   given two arbitrary integers a, b, calculates
#   the gcd(a, b) and the unique s, t such that s*a + t*b = gcd(a, b)
#
# input: a, b
#
# output: a string in the form "s t gcd"
#

#@method
function bashlets_awk_math_extended_gcd()
{
    local a="${1:-0}" b="${2:-0}"

    $BASHLETS_NAMESPACE number validate_as_integer $a || return 1
    $BASHLETS_NAMESPACE number validate_as_integer $b || return 1

    local awk_text="$($BASHLETS_NAMESPACE awklibrary load)"

    awk_text="
        $awk_text

        BEGIN {
            print extended_gcd(a, b);
            exit;
        }
    "

    awk -v a=$a -v b=$b "$awk_text" | tr \; " "
}


#
# AWK implementation of the Chinese remainder theorem
#
# given a positive integer k, positive integers a_1, ..., a_k which are
# pairwise coprime and arbitrary integers n_1, ..., n_k, we find the unique
# x such that
#
#     x = a_1 (mod n_1), ..., x = a_k (mod n_k)
#
# (see http://en.wikipedia.org/wiki/Chinese_remainder_theorem)
#

#@method
function bashlets_awk_math_chinese()
{
    local k="${1:-0}"
    shift

    local result return_code

    $BASHLETS_NAMESPACE number validate_as_unsigned $k || return 1
    ((k > 0)) || return 1

    local awk_text="$($BASHLETS_NAMESPACE awklibrary load)"

    awk_text="

        $awk_text

        #
        # Chinese remainder theorem --- constructive algorithm
        #
        #   given positive integers a_1, ..., a_k which are pairwise coprime
        #   and arbitrary integers n_1, ..., n_k, we find the unique x such
        #   that
        #
        #       x = a_1 (mod n_1), ..., x = a_k (mod n_k)
        #
        #   (see http://en.wikipedia.org/wiki/Chinese_remainder_theorem)
        #
        #
        # input: k
        #        a_s: string of the form \"a_1;...;a_k\"
        #        n_s: string of the form \"n_1;...;n_k\"
        #
        # output: the remainder rem or the string INV if the integers
        #         n_1, ..., n_k are not pairwise coprime
        #

        function chinese_remainder(k, a_s, n_s, v, w, z, s, gcd, e, i, N, rem) {
            N = 1
            rem = 0
            
            split(a_s, v, \";\")
            split(n_s, w, \";\")
            
            for (i = 1; i <= k; i++) {
                N = N * w[i]
            }
            
            for (i = 1; i <= k; i++) {
                split(extended_gcd(w[i], N/w[i]), z, \";\")
                s = z[2]
                gcd = z[3]

                if (abs(gcd) != 1)
                    return \"INV\"
                
                e = s * N / w[i]
                
                rem = rem + v[i]*e
            }
            
            return rem
        }

        #
        # initialize the input state machine
        #

        BEGIN {
            state_reading_a_s = 0
            state_reading_n_s = 1
            state = state_reading_a_s
        }

        #
        # MAIN LOOP
        #
        #   read two consecutive lines of input, the first one being
        #   of the form a_1 ... a_k, the second one of the form n_1 ... n_k;
        #   then print the result, then start again
        #

        {
            if (state == state_reading_a_s) {
                a_s = \"\"
                k = NF
                
                for (i = 1; i <= k; i++) {
                    if (validate_int(\$i) < 0) {
                        print \"ERROR: invalid field $\"i
                        next
                    }
                    
                    if (i == 1)
                        a_s = \$i
                    else
                        a_s = a_s \";\" \$i
                }
            
                state = state_reading_n_s
            } else {
                n_s = \"\"
                N = 1

                if (NF != k) {
                    print \"ERROR: invalid number of fields\"
                    exit
                }
                
                for (i = 1; i <= k; i++) {
                    if (validate_positive_int(\$i) < 0) {
                        print \"ERROR: invalid field $\"i
                        next
                    }
                    
                    if (i == 1)
                        n_s = \$i
                    else
                        n_s = n_s \";\" \$i
                }
                
                if ((rem = chinese_remainder(k, a_s, n_s)) == \"INV\") {
                    print \"ERROR: the n_s are not pairwise coprime\"
                    exit
                } else {
                    # print output #
                    print rem
                    exit
                }
            }
        }
    "

    # prepare input
    local i a_s n_s

    # the a's first...
    for ((i = 0; i < k; i++))
    do
        a_s="$a_s $1"
        shift
    done

    # then the n's
    for ((i = 0; i < k; i++))
    do
        n_s="$n_s $1"
        shift
    done

    # grind numbers...
    result="$(echo -e "${a_s}\n${n_s}" | awk "$awk_text")"

    # check result
    $BASHLETS_NAMESPACE number validate_as_integer $result && return_code=0

    echo $result
    return $return_code
}

# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
