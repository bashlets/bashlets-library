#!/bin/bash


################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# Bashlets -- A modular extensible toolbox for Bash
#
# Copyright (c) 2014-6 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################


source bashlet datatype/unsigned
source bashlet math/integer


[ -n "$BASHLETS_JS_INTERPRETER" ] || export BASHLETS_JS_INTERPRETER=node


#
# calculate (an approximation of) PI with the aid of Wallis' product
#

#@method
function bashlets_js_math_wallis()
{
    local iterations=${1:-10000} pi

    pi="$($BASHLETS_JS_INTERPRETER -e "
        function wallis(n)
        {
            var value = 1;
            var i = 1;

            while (i < n) {
                var i2 = i*2 * i*2;
                value = value * i2 / (i2-1);
                i++;
            }

            return value;
        }

        console.log(wallis($iterations) * 2);
    ")"

    echo $pi
}


# Lucas-Lehmer primality test for Mersenne numbers
#
# cf. https://en.wikipedia.org/wiki/Lucas%E2%80%93Lehmer_primality_test

#@method
function bashlets_js_math_lucaslehmer()
{
    local p=${1:-3} res

    $BASHLETS_NAMESPACE unsigned is_odd $p || return 1
    $BASHLETS_NAMESPACE integer is_prime $p || return 1

    res="$($BASHLETS_JS_INTERPRETER -e "
        function LucasLehmer(p) {
            var s = 4;
            var M = Math.pow(2, p) - 1;

            for (i = 0; i < p - 2; i++)
            s = ((s * s) - 2) % M;

            return (s == 0);
        }

        if (LucasLehmer($p)) console.log('prime');
    ")"

    test "$res" = "prime"
}

# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
