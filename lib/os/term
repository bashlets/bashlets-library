#!/bin/bash


################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# Bashlets -- A modular extensible toolbox for Bash
#
# Copyright (c) 2014-6 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################



#@method
function bashlets_os_term_is_tty()
{
    local fd=0  # stdin

    # http://www.tldp.org/LDP/abs/html/intandnonint.html
    [[ -t "$fd" ]]
}

#@method
function bashlets_os_term_get_lines()
{
    tput lines
}

#@method
function bashlets_os_term_get_cols()
{
    tput cols
}

#@method
function bashlets_os_term_get_window_size()
{
    echo "$(tput lines):$(tput cols)"
}

#@method
function bashlets_os_term_move_up_one_line()
{
    printf "\033[1A"  # move cursor one line up
    printf "\033[K"   # delete till end of line
}

#@method
function bashlets_os_term_reset()
{
    reset
}

#@method
function bashlets_os_term_colour()
{
    local colour="${1:normal}"
    local escseq

    case "$colour" in
        normal)
            escseq="\033[0m"
            ;;
        red)
            escseq="\033[91m"
            ;;
        yellow)
            escseq="\033[93m"
            ;;
        *)
            echo 'Invalid colour!'
            ;;
    esac
            
    echo -en "$escseq"
}

#@method
function bashlets_os_term_flasher()
{
    # cf. https://en.wikipedia.org/wiki/ANSI_escape_code
    local delay="${1:-.1}"

    while true
    do
        printf "\e[?5h"
        sleep $delay
        printf "\e[?5l"
        read -s -n1 -t1 && break
    done

    printf "\e[?5l"
}

#@method
function bashlets_os_term_read_as_text()
{
    local prompt="$*"
    local input

    [[ -n $prompt ]] && read -p "$prompt: " input || read input

    echo "$input"
}

#@method
function bashlets_os_term_read_as_password()
{
    local prompt="$*"
    local input

    [[ -n $prompt ]] && read -s -p "$prompt: " input || read -s input

    echo "$input"
}


# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
