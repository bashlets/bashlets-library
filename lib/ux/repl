#!/bin/bash


################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# Bashlets -- A modular extensible toolbox for Bash
#
# Copyright (c) 2014-5 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################

source bashlet cache/fs  # TODO: generalize!
source bashlet os/term


BASHLETS_UX_REPL_ERR_INVALID_ARG=2

#@method
function bashlets_ux_repl_get_verb()
{
    local repl="$1"
    local verb="$2"
    $BASHLETS_NAMESPACE fs get "$repl" "$verb"
}

#@method
function bashlets_ux_repl_set_verb()
{
    local repl="$1"
    local verb="$2"
    local command="$3"
    $BASHLETS_NAMESPACE fs set "$repl" "$verb" "$command"
}

#@method
function bashlets_ux_repl_get_help_for_verb()
{
    local repl="$1"
    local verb="$2"
    $BASHLETS_NAMESPACE fs get "$repl" "$verb#help"
}

#@method
function bashlets_ux_repl_set_help_for_verb()
{
    local repl="$1"
    local verb="$2"
    local help="$3"
    $BASHLETS_NAMESPACE fs set "$repl" "$verb#help" "$help"
}

#@method
function bashlets_ux_repl_list_verbs()
{
    local repl="$1"
    $BASHLETS_NAMESPACE fs list_keys "$repl" | grep -v "#help$"
}

#@method
function bashlets_ux_repl_exec_verb()
{
    local repl="$1"
    shift
    local argv="${!1}"
    local verb="${argv[0]}"
    local command=$(bashlets_ux_repl_get_verb "$repl" $verb)

    test "$(type -t "$command")" = function || {
        echo "callback invalid!" >&2
        return 1
    }

    $command argv[@]
}

#@method
function bashlets_ux_repl_help()
{
    local repl="$1"
    local verb="$2"
    echo "$verb: $(bashlets_ux_repl_get_help_for_verb "$repl" "$verb")"
}

#@method
function bashlets_ux_repl_create()
{
    $BASHLETS_NAMESPACE fs create
}

#@method
function bashlets_ux_repl_destroy()
{
    $BASHLETS_NAMESPACE fs destroy "$1"
}

#@method
function bashlets_ux_repl_start()
{
    local repl="$1"
    local prompt="${2:->}"
    local argv

    $BASHLETS_NAMESPACE term is_tty || prompt=

    while $(true)
    do
        read -p "$prompt " -a argv
        verb=${argv[0]}

        if [[ $verb == help ]]
        then
            verb=${argv[1]}
            if [[ -n $verb ]]
            then
                bashlets_ux_repl_help "$repl" $verb
            else
                echo -e "Available commands:\n"
                bashlets_ux_repl_list_verbs "$repl"
            fi
        elif [[ $verb == quit || $verb == exit ]]
        then
            return 127
        else
            command=$(bashlets_ux_repl_get_verb "$repl" $verb)
            if [[ -n $command ]]
            then
                bashlets_ux_repl_exec_verb "$repl" argv[@]
                if [[ $? -eq $BASHLETS_UX_REPL_ERR_INVALID_ARG ]]
                then
                    echo "Invalid or missing argument!"
                    echo "Type 'help <COMMAND>' for help."
                fi
            else
                echo "Command not found!"
            fi
        fi

        $BASHLETS_NAMESPACE term is_tty || break
    done
}


# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
