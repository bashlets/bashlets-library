################################################################################
#                                         
# |              |    |         |         
# |---.,---.,---.|---.|    ,---.|--- ,---.
# |   |,---|`---.|   ||    |---'|    `---.
# `---'`---^`---'`   '`---'`---'`---'`---'
#
#                                        
# Bashlets -- A modular extensible toolbox for Bash
#
# Copyright (c) 2016 Roberto Reale
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
################################################################################


# A simple, configurable HTTP server written in bash.
#
# Based on code from https://github.com/avleen/bashttpd
#
# Original author: Avleen Vig, 2012
# Reworked by:     Josh Cartwright, 2012



# HTTP status codes
declare -a BASHLETS_HTTP_HTTPD_HTTP_RESPONSE=(
	[200]="OK"
	[400]="Bad Request"
	[403]="Forbidden"
	[404]="Not Found"
	[405]="Method Not Allowed"
	[500]="Internal Server Error"
)

__BASHLETS_HTTP_HTTPD_DATE=$(date +"%a, %d %b %Y %H:%M:%S %Z")
declare -a BASHLETS_HTTP_HTTPD_RESPONSE_HEADERS=(
	   "Date: $__BASHLETS_HTTP_HTTPD_DATE"
	"Expires: $__BASHLETS_HTTP_HTTPD_DATE"
	 "Server: bashlets"
)

#@method
function bashlets_http_httpd_add_response_header() {
	BASHLETS_HTTP_HTTPD_RESPONSE_HEADERS+=("$1: $2")
}

#@method
function bashlets_http_httpd_recv()
{
	echo "< $@" >&2
}

#@method
function bashlets_http_httpd_send()
{
	echo "> $@" >&2
	printf '%s\r\n' "$*"
}

#@method
function bashlets_http_httpd_send_response()
{
	local code=$1

	bashlets_http_httpd_send "HTTP/1.0 $1 ${BASHLETS_HTTP_HTTPD_HTTP_RESPONSE[$1]}"

	for i in "${__BASHLETS_HTTP_HTTPD_HTTP_RESPONSE_HEADERS[@]}"
	do
		bashlets_http_httpd_send "$i"
	done

	bashlets_http_httpd_send

	while read -r line
	do
		bashlets_http_httpd_send "$line"
	done
}

#@method
function bashlets_http_httpd_send_response_ok_exit()
{
	bashlets_http_httpd_send_response 200
	exit 0
}

#@method
function bashlets_http_httpd_fail_with()
{
	bashlets_http_httpd_send_response "$1" <<< "$1 ${BASHLETS_HTTP_HTTPD_HTTP_RESPONSE[$1]}"
	exit 1
}

#@method
function bashlets_http_httpd_get_request_method()
{
	echo "$__BASHLETS_HTTP_HTTPD_REQUEST_METHOD"
}

#@method
function bashlets_http_httpd_set_request_method()
{
	__BASHLETS_HTTP_HTTPD_REQUEST_METHOD="$1"
}

#@method
function bashlets_http_httpd_get_request_uri()
{
	echo "$__BASHLETS_HTTP_HTTPD_REQUEST_URI"
}

#@method
function bashlets_http_httpd_set_request_uri()
{
	__BASHLETS_HTTP_HTTPD_REQUEST_URI="$1"
}

#@method
function bashlets_http_httpd_get_request_http_version()
{
	echo "$__BASHLETS_HTTP_HTTPD_REQUEST_HTTP_VERSION"
}

#@method
function bashlets_http_httpd_set_request_http_version()
{
	__BASHLETS_HTTP_HTTPD_REQUEST_HTTP_VERSION="$1"
}

#@method
function bashlets_http_httpd_serve_file()
{
	local file=$1
	local CONTENT_TYPE CONTENT_LENGTH

	case "$file" in
		*\.css)
			CONTENT_TYPE="text/css"
			;;
		*\.js)
			CONTENT_TYPE="text/javascript"
			;;
		*)
			read -r CONTENT_TYPE < <(file -b --mime-type "$file")
			# if file(1) is not available, we set
			# CONTENT_TYPE="application/octet-stream" # unknown type
			# but cf. http://stackoverflow.com/questions/1176022/
			;;
	esac

	bashlets_http_httpd_add_response_header "Content-Type" "$CONTENT_TYPE";

	read -r CONTENT_LENGTH < <(stat -c'%s' "$file")         && \
		bashlets_http_httpd_add_response_header "Content-Length" "$CONTENT_LENGTH"

	bashlets_http_httpd_send_response_ok_exit < "$file"
}

#@method
function bashlets_http_httpd_serve_dir_with_tree()
{
	local dir="$1" tree_vers tree_opts basehref x

	bashlets_http_httpd_add_response_header "Content-Type" "text/html"

	# The --du option was added in 1.6.0.
	read x tree_vers x < <(tree --version)
	[[ $tree_vers == v1.6* ]] && tree_opts="--du"

	bashlets_http_httpd_send_response_ok_exit < \
		<(tree -H "$2" -L 1 "$tree_opts" -D "$dir")
}

#@method
function bashlets_http_httpd_serve_dir_with_ls()
{
	local dir=$1

	bashlets_http_httpd_add_response_header "Content-Type" "text/plain"

	bashlets_http_httpd_send_response_ok_exit < <(ls -la "$dir")
}

#@method
function bashlets_http_httpd_serve_dir()
{
	local dir=$1

	# If `tree` is installed, use that for pretty output.
	which tree &>/dev/null && \
		bashlets_http_httpd_serve_dir_with_tree "$@"

	bashlets_http_httpd_serve_dir_with_ls "$@"

	bashlets_http_httpd_fail_with 500
}

#@method
function bashlets_http_httpd_serve_dir_or_file_from()
{
	local URL_PATH=$1/$3
	shift

	# sanitize URL_PATH
	URL_PATH=${URL_PATH//[^a-zA-Z0-9_~\-\.\/]/}
	[[ $URL_PATH == *..* ]] && bashlets_http_httpd_fail_with 400

	# Serve index file if exists in requested directory
	[[ -d $URL_PATH && -f $URL_PATH/index.html && -r $URL_PATH/index.html ]] && \
		URL_PATH="$URL_PATH/index.html"

	if [[ -f $URL_PATH ]]; then
		[[ -r $URL_PATH ]]                                  && \
			bashlets_http_httpd_serve_file "$URL_PATH" "$@" || \
			bashlets_http_httpd_fail_with 403
	elif [[ -d $URL_PATH ]]; then
		[[ -x $URL_PATH ]]                                  && \
			bashlets_http_httpd_serve_dir "$URL_PATH" "$@"  || \
			bashlets_http_httpd_fail_with 403
	fi

	bashlets_http_httpd_fail_with 404
}

#@method
function bashlets_http_httpd_serve_static_string()
{
	bashlets_http_httpd_add_response_header "Content-Type" "text/plain"
	bashlets_http_httpd_send_response_ok_exit <<< "$1"
}

#@method
function bashlets_http_httpd_on_uri_match()
{
	local regex=$1
	shift

	[[ $__BASHLETS_HTTP_HTTPD_REQUEST_URI =~ $regex ]] && "$@" "${BASH_REMATCH[@]}"
}

#@method
function bashlets_http_httpd_unconditionally()
{
   "$@" "$__BASHLETS_HTTP_HTTPD_REQUEST_URI"
}

# ex: ts=4 sw=4 et filetype=sh noexpandtab
